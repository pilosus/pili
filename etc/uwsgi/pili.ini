#
# Main section
#

[default]
# upstream
http-socket = 0.0.0.0:8080

# master process
master = true

# listen queue
listen = 10

# app entry point
module = pili.entrypoints.wsgi:application

# application's absolute path
app_dir = /app

# internal routing
route = ^/static/(.+)$ static:%(app_dir)/pili/static/$1

# enable Python threads
# not needed when threads option present
#enable-threads = true

# set number of processes / threads
workers = 4
threads = 2

# get rid of 'invalid request block size' errors,
# increase buffer for requests headers
buffer-size = 32768

# statistics for uwsgi workers: uwsgitop :8087
stats = 0.0.0.0:8087
memory-report = true

## optimizations ##

# use offloading subsystem for routing and static serving
#offload-threads = 8

# size of the request body after which the body will be stored to disk
# (as a temporary file) instead of memory
#post-buffering = 65536

# recycle processes (restart) to fight memory leaks
#max-requests = 1000

# if request takes longer than nubr of seconds specified as harakiri parameter
# request is dropped, worker is recycled
# make sure nginx's upstream is configured properly:
# proxy_read_timeout 60s;
# proxy_send_timeout 60s;
#harakiri = 60

# clear environment on exit
#vacuum = true

#
# Sections by workers
#

[solo]
ini = :default
workers = 1
threads = 1

[duet]
ini = :default
workers = 2
threads = 1

[quartet]
ini = :default
workers = 4
threads = 2

[octet]
ini = :default
workers = 8
threads = 4

[choir]
ini = :default
workers = 16
threads = 8

[orchestra]
ini = :default
workers = 32
threads = 16

#
# Sections by environments
#

[testing]
ini = :solo
python-autoreload = true

[development]
ini = :solo
python-autoreload = true

[production]
ini = :quartet
